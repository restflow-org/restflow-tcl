imports:

- classpath:/org/restflow/tcl/types.yaml

components:

- id: Adder
  type: TclActor
  properties:
    step: |
      set sum [expr $a + $b]
    inputs:
      a: 
        default: 0
      b: 
        default: 0
    outputs: 
      sum:
      
- id: ConstantSource
  type: TclActor
  properties:
    step: |
      set output "$value"
    inputs: 
      value:
    outputs: 
      value:

- id: IntegerConstantSource
  type: TclActor
  properties:
    step: |
      set output "$value"
    inputs: 
      value:
    outputs: 
      value:
    types:
      value: Integer
      output: Integer


- id: Counter
  type: TclActor
  properties:
    initialize:
      set count 0
    step: |
      set count [expr $count + 1]
    inputs: 
      input:
    outputs:
      count:
    state:
      count:
      
- id: IntegerBandpassFilter
  type: TclActor
  properties:
    step: |
      if { $input >= $min && $input <= $max } {
        set output $input
      } else {
        disableOutput output
      }
    inputs: 
      min:
      max:
      input:
    outputs: 
      output:

- id: IntegerSequenceGenerator
  type: TclActor
  properties:
    initialize: |
      set nextValue $initial
    step: |
      set value $nextValue
      set nextValue [expr $nextValue + $step]
      if { $value > $max } {
        disableOutput value
      }
    state:
      nextValue:
    inputs:
      initial: 
        default: 1
      step: 
        default: 1
      max: 
        default: 1
    outputs:
      value:

- id: ListSource
  type: TclActor
  properties:
    step: |
      set outputList $inputList
    inputs: 
      inputList:
        type: List<Number>
    outputs: 
      outputList:  

- id: IntegerStreamMergerNoDuplicates
  type: TclActor
  properties:
    initialize: |
      set _last 0
      set _first true
      enableInput a
      enableInput b
    step: |
      if { $a == "null" && $b == "null" } {
        enableInput a
        enableInput b
        disableOutput c
      } elseif { $a == "null" } {
        set c $b
        enableInput b
      } elseif { $b == "null" } {
        set c $a
        enableInput a
      } elseif { $a < $b } {
        set c $a
        enableInput a
      } elseif { $a > $b } {
        set c $b
        enableInput b
      } elseif { $a == $b } {
        set c $a
        enableInput a
        enableInput b
      }
      if { $c != "null" } {
        if { $_first == "true" } {
          set _last $c
          set _first false
        } else {
          if { $c == $_last } {
            disableOutput c
          } else {
            set _last $c
          }
        }
      }
    inputs: 
      a:
        optional: true
        nullable: true
        defaultReadiness: false
      b:
        optional: true
        nullable: true
        defaultReadiness: false
    outputs: 
      c:
    state: 
      a:
      b:
      _last:
      _first:

- id: Multiplier
  type: TclActor
  properties:
    step: set product [expr $a * $b]
    inputs: 
      a:
      b:
    outputs: 
      product:
 
- id: PrintStreamWriter
  type: TclActor
  properties:
    step: |
      if {$buffer == "null"} {
        set buffer "${message}END_OF_LINE"
      } else {
        set buffer "${buffer}${message}END_OF_LINE"
      }
      if { $outputImmediately == "true"} {
        puts ${message}
      }
    wrapup: |
      if { $outputAtWrapup == "true" } {
        if { "$name" != "null" } {
          puts "*** $name ***"
        }
        puts -nonewline [regsub -all END_OF_LINE $buffer \n]
      }
    state:
      buffer:
    inputs:
      name:
      message:
      outputImmediately: 
        default: true
      outputAtWrapup: 
        default: false
    state:
      name:
      buffer:
      outputAtWrapup:

- id: SingleUnitBuffer
  type: ConstantSource
  
- id: SingleUnitIntegerBuffer
  type: IntegerConstantSource
  
- id: StringConcatenator
  type: TclActor
  properties:
    step: |
      set concatenatedString "${stringOne}${stringTwo}"
    inputs:
      stringOne:
      stringTwo:
    outputs: 
      concatenatedString:
      
- id: BadActor
  type: TclActor
  properties:
    step: |
      #The following is invalid tcl code to generate an error for unit tests!
      output = $value
    inputs:
      value:
    outputs: 
      output:      
      